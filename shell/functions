#!/usr/bin/env sh
# @TODO gpg keys,tmux
export SHELL_FUNC_PATH=$(realpath "${BASH_SOURCE:-$0}")
STACK_ENV_FILE="/tmp/shfunc"
[ $(which pass 2>/dev/null) ] && PASS="$(which pass)" || PASS="pass"
SSH_USER_DIR="$HOME/.ssh"
SSH_CONFD_DIR="$SSH_USER_DIR/conf.d"
SSH_CONFIG="
# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
#
#
# The SSH client reads the configuration file stanza by stanza, and if more than one patterns match,
# the options from the first matching stanza take precedence. Therefore more host-specific declarations
# should be given at the beginning of the file, and more general overrides at the end of the file.
#
# Man page: https://man.openbsd.org/OpenBSD-current/man5/ssh_config.5

Include $SSH_CONFD_DIR/*.conf
Host *
  TCPKeepAlive yes
  ServerAliveInterval 120
  User root
  Compression yes
"
BOOKMARKS_DIR="$HOME/.bookmarks"
KUBE_CLUSTERS_DIR="$HOME/.kube/clusters"
AWS_CREDENTIALS_PATH="$HOME/.aws/credentials"

# Create env file if not exists
[ ! -f "$STACK_ENV_FILE" ] && $(touch "$STACK_ENV_FILE")
# Get variable value from env file
_get_env_var() {
    # $1 - variable
    # $2 - file(optional)
    local var value file="$STACK_ENV_FILE"
    [ ! -z "$2" ] && file="$2"
    var=$(grep "^0*$1=" "$file")
    [ -n "$var" ] && value=$(sh -c "export $var; echo \"\$$1\"")
    echo "$value"
}

# Create or replace variable in env file
_update_env() {
    # $1 - variable
    # $2 - value
    # $3 - file(optional)
    local file="$STACK_ENV_FILE"
    [ ! -z "$3" ] && file="$3"
    if $(! grep -q "^0*$1=" "$file"); then
        echo "$1=\"$2\"" >> "$file"
    else
        $(sed -i "s/$1=.*/$1=\"$2\"/" "$file")
    fi
}

# Yes/No prompt to confirm any action. Returns 0 or 1
# call syntax: _confirm [<prompt>]
_confirm() {
    local prompt result response
    [ ! -z "$1" ] && prompt="$1" || prompt="Are you sure"
    prompt="$prompt [y/n] ?"
    # Loop forever until the user enters a valid response (Y/N or Yes/No).
    while true; do
        read -r -p "$prompt " response
        case "$response" in
            [Yy][Ee][Ss] | [Yy]) # Yes or Y (case-insensitive).
                result=0
                break
                ;;
            [Nn][Oo] | [Nn]) # No or N.
                result=1
                break
                ;;
            *) # Anything else (including a blank) is invalid.
                ;;
        esac
    done
    echo $result
}

###DOC: funclist - List defined shell functions
funclist() {
    awk '{ if ($1 ~ /^###DOC:/) print $0 }' $SHELL_FUNC_PATH | sed 's/###DOC: //'
}

# SSH tools

# Print info of given ssh host
_ssh_info() {
    [ -z "$1" ] && return || true
    host_info=$(ssh -tt -G $1)
    agent_info=$(ssh-add -l)
    echo "$host_info" | grep hostname | head -n 1
    echo "$host_info" | grep user | head -n 1
    echo "$host_info" | grep port | head -n 1
    echo "$host_info" | grep identityfile | head -n 1
    echo "$host_info" | grep localforward
    echo -e "\n[ SSH agent keys: ]"
    echo "$agent_info"
}
# another way to make visible in fzf preview _ssh_info
# export -f _ssh_info

# Init sshlist directory structure and files
_ssh_init() {
    local overwrite_bak overwrite_conf
    mkdir -p $SSH_CONFD_DIR
    [ -f "$SSH_USER_DIR/known_hosts" ] && true || touch "$SSH_USER_DIR/known_hosts"
    # when ssh config already exists
    if [ -f "$SSH_USER_DIR/config" ]; then
        overwrite_conf=$(_confirm "$SSH_USER_DIR/config already exists. This file will be backed up and replaced. Continue?")
        [ $overwrite_conf -eq 1 ] && return || true
        # when bak file already exists
        if [ -f "$SSH_USER_DIR/config.bak" ]; then
            overwrite_bak=$(_confirm "$SSH_USER_DIR/config.bak already exists, overwrite?")
            if [ $overwrite_bak -eq 0 ]; then
                mv -f "$SSH_USER_DIR/config" "$SSH_USER_DIR/config.bak"
            fi
        else
            mv -f "$SSH_USER_DIR/config" "$SSH_USER_DIR/config.bak"
        fi
    fi
    echo "$SSH_CONFIG" > "$SSH_USER_DIR/config"
    echo "sshlist initialized"
    return 0
}

# Check sshlist directories and files
_ssh_check() {
    local noexist_error empty_dir_error
    noexist_error="doesn't exist. Run 'sshlist init' first."
    empty_dir_error="$SSH_CONFD_DIR is empty. Add files first."
    [ ! -d "$SSH_CONFD_DIR" ] && echo "$SSH_CONFD_DIR $noexist_error" && return 1 || true
    [ ! -f "$SSH_USER_DIR/config" ] && echo "$SSH_USER_DIR/config $noexist_error" && return 1 || true
    [ $(ls -A "$SSH_CONFD_DIR" | wc -l) -eq 0 ] && echo $empty_dir_error && return 1 || true
}

###DOC: sshlist - List and connect to ssh aliases defined in ~/.ssh/config and ~/.ssh/conf.d
sshlist() {
    local ssh_check find_files_cmd ssh_config complete_ssh preview_cmd preview_tree_cmd
    [ "$1" = "init" ] && _ssh_init && return || true # init command
    ssh_check="$(_ssh_check)"
    [ ! -z "$ssh_check" ] && echo $ssh_check && return 1 || true
    preview_cmd='. $SHELL_FUNC_PATH; _ssh_info {} | bat --color=always --style=grid'
    preview_tree_cmd="tree -CF -L 3 -l $SSH_CONFD_DIR | bat --color=always --style=grid"
    find_files_cmd="find -L $SSH_CONFD_DIR -type f -name '*.conf' -print0 | sort -z"
    ssh_config=$(sh -c "$find_files_cmd" | xargs -0 -I{} sh -c "cat {};echo")$(
        echo
        cat "$SSH_USER_DIR/config"
    )
    # Parse ssh config: Get only first host alias, no wildcard config.
    complete_ssh=$(echo "$ssh_config" | grep -P '^Host ([^*]+)$' | sed 's/Host //' | awk '{ print $1 }')
    printf '%s\n' ${complete_ssh[@]} | fzf --border --info=inline --no-mouse \
        --preview="$preview_cmd; $preview_tree_cmd" | xargs -o -I{} ssh -tt {}
}

# Directory bookmarks

# Init bookmarks directory
_mark_init() {
    mkdir -p "$BOOKMARKS_DIR"
    echo "directory bookmarks initialized"
    return 0
}

###DOC: marklist - List directory bookmarks defined in ~/.bookmarks
marklist() {
    [ "$1" = "init" ] && _mark_init && return || true # init command
    local noexist_error="$BOOKMARKS_DIR doesn't exist. Run 'marklist init' first."
    [ ! -d "$BOOKMARKS_DIR" ] && echo "$noexist_error" && return 1 || true
    local preview_cmd="tree -CF -L 2 $BOOKMARKS_DIR/{}"
    local path_prefix_escaped="$(echo $BOOKMARKS_DIR | sed 's/\//\\\//g')\/" # with trailing slash
    mark=$(find $BOOKMARKS_DIR -type l | sed "s/$path_prefix_escaped//" \
        | fzf --no-mouse --preview "$preview_cmd" \
        --header="<Del> Delete, <Shift-Up|Down> Scroll preview, <Esc> Exit" \
        --bind "del:reload(rm $BOOKMARKS_DIR/{})" )
    if [ -n "$mark" ]; then
        markgo "$mark"
    fi
}

###DOC: markadd - Add directory bookmark. Usage: markadd [source/directory/path] [bookmark-name].
markadd() {
    local dir_path bookmark_name
    [ -n "$1" ] && dir_path="$1" || dir_path="$(pwd)"
    [ -n "$2" ] && bookmark_name="$2" || bookmark_name="$(basename "$PWD")"
    ln -sf "$dir_path" "$BOOKMARKS_DIR/@$bookmark_name"
}

###DOC: markgo - Go to bookmark target directory. Usage: markgo <bookmark-name>.
markgo() {
    export CDPATH=".:$BOOKMARKS_DIR:/"
    [ -n "$1" ] && cd -P "$1" || false
}

# Kube tools
# https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/
# https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/
# TODO : kubectl config view --flatten > ~/.kube/config

# Check kubelist|kubeset directories and files
_kube_check() {
    local noexist_error empty_dir_error
    noexist_error="$KUBE_CLUSTERS_DIR doesn't exist. Run 'kubeset|kubelist init' first."
    empty_dir_error="$KUBE_CLUSTERS_DIR is empty. Add files first."
    [ ! -d "$KUBE_CLUSTERS_DIR" ] && echo "$noexist_error" && return 1 || true
    [ $(ls -A "$KUBE_CLUSTERS_DIR" | wc -l) -eq 0 ] && echo $empty_dir_error && return 1 || true
}

# Init kubelist|kubeset directories and files
_kube_init() {
    mkdir -p $KUBE_CLUSTERS_DIR
    echo "kube initialized"
    return 0
}

###DOC: kubeset - Set KUBECONFIG env with merging multiple kubeconfig files in ~/.kube/clusters/
kubeset() {
    [ "$1" = "init" ] && _kube_init && return || true # init command
    local kube_check="$(_kube_check)"
    [ ! -z "$kube_check" ] && echo $kube_check && return 1 || true
    export KUBECONFIG=$(find -L $KUBE_CLUSTERS_DIR -type f | sed ':a;N;s/\n/:/;ba')
}

###DOC: kubelist - Set KUBECONFIG env with single kubeconfig file in ~/.kube/clusters/
kubelist() {
    local kube_check path_prefix_escaped kubeconfig preview_cmd preview_tree_cmd
    [ "$1" = "init" ] && _kube_init && return || true # init command
    kube_check="$(_kube_check)"
    [ ! -z "$kube_check" ] && echo $kube_check && return 1 || true
    path_prefix_escaped="$(echo $KUBE_CLUSTERS_DIR | sed 's/\//\\\//g')\/" # with trailing slash
    preview_cmd="bat --style=numbers --color=always --line-range :500 $KUBE_CLUSTERS_DIR/{}"
    preview_tree_cmd="tree -CF -L 3 -l $KUBE_CLUSTERS_DIR | bat --color=always --style=grid"
    kubeconfig=$(find -L $KUBE_CLUSTERS_DIR -type f | sed "s/$path_prefix_escaped//" \
        | fzf --no-mouse --preview "$preview_cmd; $preview_tree_cmd")
    if [ ! -z "$kubeconfig" ]; then
        export KUBECONFIG="$KUBE_CLUSTERS_DIR/$kubeconfig"
    fi
}

###DOC: kubectx - List and switch k8s contexts
kubectx() {
    kubectl config get-contexts -o name | fzf | xargs kubectl config use-context
}

###DOC: kubens - List and switch k8s namespaces
kubens() {
    local ns=$(kubectl get namespace --no-headers=true -o custom-columns=NAME:.metadata.name | fzf)
    kubectl config set-context --current --namespace=$ns
}

# AWS tools

###DOC: awslist - Set AWS_PROFILE by parsing AWS named profiles in file ~/.aws/credentials
awslist() {
    local profile noexist_error="$AWS_CREDENTIALS_PATH doesn't exist. Create this file first."
    if [ ! -f "$AWS_CREDENTIALS_PATH" ] && [ ! -L "$AWS_CREDENTIALS_PATH" ]; then
        echo "$noexist_error" && return 1
    fi
    profile=$(awk '{ if ($1 ~ /^\[/) print $1 }' $AWS_CREDENTIALS_PATH | sed 's/[][]//g' | fzf)
    if [ ! -z "$profile" ]; then
        export AWS_PROFILE=$profile
    fi
}

# Pass tools

# Get pass store
_pass_get_store() {
    echo "${PASSWORD_STORE_DIR:-$HOME/.password-store}"
}

# Check pass directories and files
_pass_check() {
    local noexist_error pass_store="$(_pass_get_store)"
    noexist_error="$pass_store doesn't exist. Create this directory and init password store first."
    [ ! -d "$pass_store" ] && echo "$noexist_error" && return 1 || true
}

###DOC: passet - Set PASSWORD_STORE_DIR from PASSWORD_STORES environment variable (colon separated pathes)
passet() {
    if [ ! -z "$PASSWORD_STORES" ]; then
        local preview_cmd="
            [ -d "{}" ] && tree -CF -L 3 "{}" | bat --color=always --style=grid;
            [ -f "{}/.gpg-id" ] && cat "{}/.gpg-id" | xargs echo 'GPG key:';"
        local profile=$(echo $PASSWORD_STORES | tr '\:' '\n' | sed 's:/*$::' | fzf --no-mouse --preview "$preview_cmd")
        if [ ! -z "$profile" ]; then
            export PASSWORD_STORE_DIR=$profile
        fi
    else
        echo "Variable PASSWORD_STORES is not set, using default $HOME/.password-store"
    fi
}

# passlist help output
_passlist_usage() {
    cat <<- EOF
	Usage: passlist [ -p | --passet ] [ -c | --copy ] [ -h | --help ]
	Options:
	-p  select password store, calling 'passet' command
	-c  copy password to clipboard
	-h  show this help text
	Key Bindings:
	<F3>          View record
	<F4>          Edit record
	<Ctrl-q>      Get QR code from selected record's line (execute passqr)
	<Ctrl-o>      Generate OTP code from record's OTP URI (execute passotp)
	<Ctrl-Alt-o>  Generate OTP code from record's OTP URI with persistent auto regenerate (execute passotp -p)
	EOF
}

# passlist preview function template; returning string
_passlist_preview() {
    local title_cmd="echo \"Profile: $(_pass_get_store)\" | bat --color=always --style=grid"
    local preview_cmd="$PASS show {} 2>/dev/null | bat --color=always --style=grid,header,numbers --file-name={}"
    local preview_tree_cmd="
        read record <<< {}; [ -d \"$(_pass_get_store)/\$record\" ] && $PASS \$record \
        || echo \$record | sed 's,/*[^/]\+/*$,,' | xargs $PASS"
    [ "$1" = "tree" ] && echo "$title_cmd; $preview_tree_cmd" && return 0
    echo "$title_cmd; $preview_cmd; $preview_tree_cmd"
}

# passlist add function;
# getting a pass record as an argument to cut parent dir and create a new record in that dir
passadd() {
    # manage options
    local opts passet=0 multiline=0 generate=0
    opts=$(getopt -a -n passadd -o pmgh --long passet,multiline,generate,help -- "$@")
    local err=$?
    [ $err -ne 0 ] && _passlist_usage && return 1
    eval set -- "$opts"
    while true; do case $1 in
        -p | --passet)
            passet=1
            shift
            ;;
        -m | --multiline)
            multiline=1
            shift
            ;;
        -g | --generate)
            generate=1
            shift
            ;;
        -h | --help)
            _passlist_usage
            return 0
            ;;
        --)
            shift
            break
            ;;
    esac done
    # call passet if selected -p
    [ $passet -eq 1 ] && passet
    # check execution requirements
    pass_check="$(_pass_check)"
    [ ! -z "$pass_check" ] && echo $pass_check && return 1 || true
    # when record not selected - execute fzf window
    local record=$1
    if [ -z "$record" ]; then
        record=$(echo "$(_passlist_get_records 'dir')" | fzf --no-mouse \
            --header="<Alt-h> Help, <Shift-Up|Down> Scroll preview, <Esc> Exit" \
            --preview ". $SHELL_FUNC_PATH; $(_passlist_preview 'tree')" \
            --bind "alt-h:preview(. $SHELL_FUNC_PATH;_passlist_usage)" \
            --bind "alt-v:reload(sh -c \". $SHELL_FUNC_PATH;_passlist_toggle_records\" )" \
            --bind "ctrl-a:execute($PASS -c {}>/dev/tty; sleep 2)" \
            --bind "ctrl-c:execute-silent($PASS -c {}>/dev/tty; sleep 2)+clear-screen" \
            --bind "ctrl-q:execute(. $SHELL_FUNC_PATH; passqr {})" \
            --bind "ctrl-o:preview(. $SHELL_FUNC_PATH; passotp {}; $(_passlist_preview 'tree'))" \
            --bind "ctrl-alt-o:execute(. $SHELL_FUNC_PATH; passotp -p {}>/dev/tty)")
    fi

    local prompt_prefix
    [ "$record" = "/" ] && prompt_prefix="" || prompt_prefix="$record/"
    local prompt_help="Press Ctrl-D to exit."
    # when record is an existing directory
    if [ -d "$(_pass_get_store)/$record" ]; then
        read -r -p "$prompt_help Insert record $prompt_prefix" response
        if [ ! -z "$response" ]; then
            [ $multiline -eq 1 ] && $PASS insert -m "$prompt_prefix$response" && return
            [ $generate -eq 1 ] && $PASS generate "$prompt_prefix$response" && return
            $ PASS insert "$prompt_prefix$response"
        fi
    fi
    # just insert record
    $PASS insert "$record"

    # if [ -f "$(_pass_get_store)/${record}.gpg" ]; then
    #     read -r -p "$prompt_help Insert record $record" response
    #     [ -z "$response" ] && $PASS insert "$record" || $PASS insert "$prompt_prefix$response"
    # fi

}

_passlist_toggle_records() {
    local PASSLIST_TOGGLE_VIEW="$(_get_env_var 'PASSLIST_TOGGLE_VIEW')"
    case "$PASSLIST_TOGGLE_VIEW" in
        "records")
            _update_env "PASSLIST_TOGGLE_VIEW" "dir"
            _passlist_get_records "dir"
            ;;
        "dir" | "")
            _update_env "PASSLIST_TOGGLE_VIEW" "records"
            _passlist_get_records
            ;;
        *) ;;
    esac
}

# passlist records
_passlist_get_records() {
    local path_prefix="$(_pass_get_store)" pass_record
    # local path_prefix_escaped=$(echo "${path_prefix//\//\\/}\/") # with trailing slash
    local path_prefix_escaped="$(echo $path_prefix | sed 's/\//\\\//g')\/" # with trailing slash
    [ -z "$1" ] && pass_record=$(
        find -L $path_prefix -type f -name "*.gpg" | sed -e 's/\.gpg$//' | sed "s/$path_prefix_escaped//"
    )
    [ "$1" = "dir" ] && pass_record=$(
        find -L $path_prefix -mindepth 1 -type d | sed "s/$path_prefix_escaped//"
    ) && pass_record="$pass_record\n/"
    echo "$pass_record"
}

###DOC: passlist - View password store records. See usage: passlist -h
passlist() {
    # manage options
    local opts passet=0 copy=0
    opts=$(getopt -a -n passlist -o pch --long passet,copy,help -- "$@")
    local err=$?
    [ $err -ne 0 ] && _passlist_usage && return 1
    eval set -- "$opts"
    while true; do case $1 in
        -p | --passet)
            passet=1
            shift
            ;;
        -c | --copy)
            copy=1
            shift
            ;;
        -h | --help)
            _passlist_usage
            return 0
            ;;
        --)
            shift
            break
            ;;
    esac done
    # call passet if selected -p
    [ $passet -eq 1 ] && passet
    # check execution requirements
    pass_check="$(_pass_check)"
    [ ! -z "$pass_check" ] && echo $pass_check && return 1 || true
    # main dialog window
    local pass_record=$(echo "$(_passlist_get_records)" | fzf --no-mouse \
        --header="<Alt-h> Help, <Shift-Up|Down> Scroll preview, <Esc> Exit" \
        --preview ". $SHELL_FUNC_PATH; $(_passlist_preview 'tree')" \
        --bind "alt-h:preview(. $SHELL_FUNC_PATH;_passlist_usage)" \
        --bind "f3:preview($(_passlist_preview))" \
        --bind "f4:execute(EDITOR=\"vim\" $PASS edit {} >/dev/tty 2>/dev/null)" \
        --bind "alt-v:reload(sh -c \". $SHELL_FUNC_PATH;_passlist_toggle_records\" )" \
        --bind "ctrl-i:execute(sh -c \". $SHELL_FUNC_PATH; passadd {} >/dev/tty\" )" \
        --bind "ctrl-alt-i:execute(. $SHELL_FUNC_PATH; passadd -m {} >/dev/tty)" \
        --bind "ctrl-g:execute(. $SHELL_FUNC_PATH; passadd -g {} >/dev/tty)" \
        --bind "ctrl-c:execute-silent($PASS -c {} >/dev/tty 2>/dev/null; sleep 2)+clear-screen" \
        --bind "ctrl-q:execute(. $SHELL_FUNC_PATH; passqr {})" \
        --bind "ctrl-o:preview(. $SHELL_FUNC_PATH; passotp {}; $(_passlist_preview 'tree'))" \
        --bind "ctrl-alt-o:execute(. $SHELL_FUNC_PATH; passotp -p {}>/dev/tty)")
    # when record selected
    if [ ! -z "$pass_record" ]; then
        # copy password to clipboard if copy selected
        [ $copy -eq 1 ] && $PASS -c $pass_record 2>/dev/null && return 0
        # show record - default
        $PASS $pass_record 2>/dev/null
    fi
}

###DOC: passqr - View qr code of the password store's record line. Usage: passqr <record>
passqr() {
    # optional output to console: set DISPLAY='' WAYLAND_DISPLAY=''
    local pass_record=$1 line
    line=$($PASS show $pass_record | cat -n | awk '{$1=$1;print}' | fzf --reverse \
        --bind "enter:execute-silent(echo {} | cut -d ' ' -f1 | xargs -I@ pass show --qrcode=@ $pass_record)")
}

# passotp help output
_passotp_usage() {
    cat <<- EOF
	Usage: passotp [ [ -c | --copy ] | [ -p | --persistent ] ] [ -h | --help ] pass_record
	If "pass_record" is omitted a fzf selecting window is starting.
	Options:
	-c  copy code to clipboard
	-p  persistent code regeneration
	-h  show this help text
	Key Bindings:
	<F3>          View record
	EOF
}

###DOC: passotp - View otp code of password store record. See usage: passotp -h
passotp() {
    # manage options
    local opts copy=0 persistent=0
    opts=$(getopt -a -n passotp -o cph --long copy,persistent,help -- "$@")
    local err=$?
    [ $err -ne 0 ] && _passotp_usage && return 1
    eval set -- "$opts"
    while true; do case $1 in
        -c | --copy)
            copy=1
            shift
            ;;
        -p | --persistent)
            persistent=1
            shift
            ;;
        -h | --help)
            _passotp_usage
            return 0
            ;;
        --)
            shift
            break
            ;;
    esac done

    # check execution requirements
    pass_check="$(_pass_check)"
    [ ! -z "$pass_check" ] && echo $pass_check && return 1 || true

    # when record not selected - execute fzf window
    local record=$1
    if [ -z "$record" ]; then
        record=$(echo "$(_passlist_get_records)" | fzf --no-mouse \
            --preview ". $SHELL_FUNC_PATH; $(_passlist_preview 'tree')" \
            --bind "f3:preview($(_passlist_preview))")
    fi

    # when copy selected/not selected - copy to clipboard or show code
    if [ $copy -eq 1 ]; then
        $PASS otp -c $record 2>/dev/null
        return
    elif [ $copy -eq 0 ] && [ $persistent -eq 0 ]; then
        $PASS otp $record 2>/dev/null
        return
    fi

    # when persistent selected
    [ $persistent -eq 1 ] && true || return
    local while_done=0 timer=30 key
    while true; do
        [ $while_done -eq 1 ] && echo && break
        local otp="$($PASS otp $record 2>/dev/null)"
        clear && echo $otp
        # waiting keypress with timer
        # for ((i = $timer; i > 0; i--)); do # bash variant
        local i=$timer
        while [ $i -ge 0 ]; do
            printf "\rOTP code will be expired in $i seconds. Press \"q\" to exit or any key to regenerate the code."
            i=$((i - 1))
            IFS= read -s -N 3 -t 1 key
            case "$key" in
                [Qq]) while_done=1 && break ;; # Q or q - quit
                "") continue ;;                # no keypress - do nothing
                $'\n') break ;;                # catch enter key
                *) break ;;                    # any key
            esac
        done
    done
}
